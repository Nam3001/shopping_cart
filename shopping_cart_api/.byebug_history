exit
sku
exit
object.get_product_variants
exit
@product.product_variants.each do |variant| p variant.sku end
@product.product_variants
exit
product_variant.sku.split('-')
product_variant.sku
product_variant
exit
product_variants
exit
product_variants
exit
product_variants
exit
product_variants
exit
v[:variant_combinations]
exit
val
val = v
v
v.values
v[:variant_combinations]
exit
product_variants&.values[0][:variant_combinations].values.length
product_variants&.values[0][:variant_combinations].length
product_variants&.values[0][:variant_combinations][0]
product_variants&.values[0][:variant_combinations]
product_variants&.values[0]
product_variants&.values
exit
product_variants&.values
product_variants
v
v[:variant_combinations]
exit
  object.get_product_variants
exit
 object.get_product_variants
exit
ProductVariant.find 29
object.product_variants
object
object.get_product_variants
object
exit
ProductVariant.where(id: 29)
result[:product].get_product_variants
result[:product]
exit
result
exit
result
result[:product]
exit
variant =  @product.product_variants.find 29
product_variants.values[0][:id]
product_variants.values[0]
variants
exit
product_variant
product_variant.update(value_to_update)
value_to_update
exit
v[:quantity]
v[:price]
                product_variant.update(
                price: v[:price],
                quantity: v[:quantity]
              )
 product_variant.update(
   143:                 price: v[:price],
   144:                 quantity: v[:quantity]
   145:               )
product_variant
exit
v[:variant_combinations].present?
!product_variants_to_delete&.include? v[:id].to_i
v[:id].nil?
exit
product_variant.update!(quantity: nil)
 product_variant = @product.product_variants.find(v[:id])
product_variant
product_variant.update!(quantity: nil)
v[:quantity]
exit
product_variant
product_variant.class
exit
product_variants
product_variants.length
product_variants
exit
 @product.product_attribute_values.length
 @product.product_attribute_values
 @product.product_attribute_values.where(id: value_id)
exit
value_id
exit
attribute_value_ids_of_attributes_to_delete
sku_ids
new_sku
exit
attribute_value_ids_of_attributes_to_delete.include?('22')
attribute_value_ids_of_attributes_to_delete.includes('22')
attribute_value_ids_of_attributes_to_delete
exit
attribute_list_to_delete
exit
attribute_list_to_delete
exit
ProductAttributeValue.all
ProductAttributeValue.where(attribute_id: 22)
ProductAttributeValue.where(attribute_id: 22).first
ProductAttributeValue.where(attribute_id: "22").first
ProductAttributeValue.first
ProductAttributeValue
attribute_list_to_delete
attribute_value_ids_of_attributes_to_delete
exit
attributes_to_delete
attribute_value_ids_of_attributes_to_delete
sku_id
exit
attributes_to_delete
attribute_list_to_delete
exit
!attributes_to_delete.nil? && attributes_to_delete.length > 0
attribute_value_ids_of_attributes_to_delete
exit
attr[:values_to_delete]
values_to_delete
sku_ids
new_sku
exit
attr[:values_to_delete]
exit
AttributeValue.where(id: attribute_value_ids)
attribute_value_ids
AttributeValue.includes(:product_attribute).where(id: attribute_value_ids)
attribute_values
attribute_values.length
exit
attribute_value_ids
exit
ttribute_values = AttributeValue.includes(:product_attribute).where(id: attribute_value_ids).map do |attribute_value|
          {
            id: attribute_value.id,
            name: attribute_value.variant.name,
            value: attribute_value.value
          }
        end
exit
attribute_values = AttributeValue.includes(:attribute).where(id: attribute_value_ids).map do |attribute_value|
          {
            id: attribute_value.id,
            name: attribute_value.variant.name,
            value: attribute_value.value
          }
        end
exit
attribute_and_values.map do |product_attribute, values|
      {
        id: product_attribute.id,
        name: product_attribute.name,
        values: values.map do |value|
          {
            id: value.id,
            value: value.value
          }
        end
      }
    end
exit
error.nil?
product
exit
product
exit
product_variants
exit
ProductVariant.create!(
                product: product,
                price: v[:price],
                quantity: v[:quantity],
                sku: sku
              )
product
sku
exit
attribute_and_values.map do |product_attribute, values|
        {
          id: product_attribute.id,
          name: product_attribute.name,
          values: values.map do |value|
            {
              id: value.id,
              value: value.value
            }
          end
        }
      end
exit
attribute_and_values
attribute_and_values.length
exit
attribute_and_values.length
exit
variants
exit
 product.product_attribute_values.create! attribute_value_id: value_id
 product.product_attribute_values
exit
  attr.attribute_values.create! values.map { |value| { value: value } }
exit
 attr.attribute_values.create! values.map { |value| { value: value } }
exit
 attr.attribute_values.create! values.map { |value| { value: value } }
exit
attr.attribute_values.create(value: 'xanh')
attr.attribute_values.create(name: 'xanh')
attr.attribute_values
exit
attr.attribute_values.create! values.map { |value| { value: value } }
values
exit
params[:values]
isSuccess
exit
params[:values].class
params[:values]
exit
object.product_attributes.map
object.product_attributes[0]
    object.product_attributes.map do |variant|
      {
        id: variant.id,
        name: variant.name
      }
    end
object.product_attributes.class
object.product_attributes
exit
object.attributes[0]
object.attributes
exit
product
ProductVariant.where(variant_id: variant.id, product_id: @product.id).count == 0
exit
result
exit
variant
