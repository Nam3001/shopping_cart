exit
category_id
exit
previous_changes
saved_changes
exit
ẽexit
exit
product.errors.full_messages
product
product.save
product
exit
token
exit
authorize @category
authorize
exit
authorize @category
@category.class
@category
exit
 params.permit(:product_name, :quantity, :price, :unit_id, :thumbnail)
params
exit
params
exit
status
exit
Rails.cache.write(cache_key, value)
cache_key
value
exit
object.is_a? Product
object.class
object[:thumbnail_url]
object.thumbnail
object.thumbnail_url
object
exit
object
exit
ẽit
object
exit
object[:thumbnail_url]
object.thumbnail_url
object
exit
object.class
object
exit
Product === object
object === Product
object << Product
object.class
object.thumbnail
object[:thumbnail_url]
object
exit
product.thumbnail_url
product.thumbnail
product
exit
p.thumbnail.attached
p.thumbnail
p.as_json.merge(thumbnail_url: p.thumbnail.attached ? Rails.application.routes.url_helpers.rails_blob_url(p.thumbnail) : "")
p.thumbnail
p.class
p
exit
paginatedProduct.class
exit
paginatedProduct.class
paginatedProduct
exit
p.thumbnail
p2.thumbnail
p2.class
paginatedProduct.class
p2.thumbnail
p.as_json
p2.as_json
product.as_json
p2.class
p2 = Product.find 1
Product.find(1).class
Product.find(1)
p.class
p
p.thumbnail
p = paginatedProduct.where(id: 1)
paginatedProduct.where(id: 1)
paginatedProduct.map { |p| p.as_json.merge(thumbnail_url: p.thumbnail.attached ? Rails.application.routes.url_helpers.rails_blob_url(p.thumbnail) : "")}
paginatedProduct.map { |p| p.as_json.merge(thumbnail_url: p.thumbnail.attached ? Rails.application.routes.url_helpers.rails_blob_url(p.thumbnail) : "")},
paginatedProduct
exit
products[:products]
products[:pagination]
product[:pagination]
products
products.class
products.pagination
products
exit
p.as_json
p
p = paginatedProduct.where(id: 1)
paginatedProduct.where(id: 1)
paginatedProduct.find(id: 1)
paginatedProduct.class
paginatedProduct.current_page
Product.with_attached_thumbnail.order(updated_at: :desc).page(page).per(per_page)
paginatedProduct
exit
prod.destroy?
prod
prod = Product.find(params[:id])
@product.destroy?
exit
@product.destroy
@product.destroy?
@product.class
@product
exit
"shopping_cart:#{@@products_cache_key}/page=*"
   exit
"shopping_cart:#{@@detail_product_cache_key}/page=*"
"shopping_cart:#{@@detail_product_cache_key}/page=*
exit
"#{@@detail_product_cache_key}/page=*"
cache_key = "#{@@detail_product_cache_key}/#{params[:id]}"
delete_pagination_products_cache
@product
updatedProduct
exit
current_user
exit
product
user
exit
user
exit
policy.public_send(:create?)
policy
exit
user
exit
authenticate_request
payload = JsonWebToken.decode(token).with_indifferent_access
 token = auth_header.split(" ").last if auth_header
auth_header = request.headers["Authorization"]
request.headers["Authorization"]
token
user
exit
access_token
exit
payload
user
access_token
exit
 token = auth_header.split(" ").last if auth_header
auth_header = request.headers["Authorization"]
access_token
exit
request.headers
JsonWebToken.decode(token).with_indifferent_access
token
token = auth_header.split(" ").last if auth_header
auth_header = request.headers["Authorization"]
request.headers["Authorization"]
payload
exit
    auth_header = request.headers["Authorization"]
payload
exit
product.valid?
exit
thumbnail
exit
thumbnail
exit
product.thumbnail = args[:thumbnail]
product.thumbnail
thumbnail
params[:thumbnail]
exit
params
  params.require(:product)
exit
product_params
params.permit(:product_name)
params.permit(:product_name, :quantity, :price, :unit_id, :thumbnail)
params
params[:thumbnail]
exit
params[exit
params
exit
User.find(decoded_token[:user_id])
exit
@current_user
exit
 User.find(decoded_token[:user_id])
exit
User.find(decoded_token[:user_id])
exit
 User.find(decoded_token[:user_id])
decoded_token
exit
@current_user
exit
product.thumbnail.attached?
product.thumbnail
product.errors.full_messages
product.save
product
exit
product
exit
product
product.save
product
exit
JsonWebToken.decode(params[:refresh_token])
JsonWebToken.encode(params[:refresh_token])
params
exit
Rails.application.credentials.dig(:auth_secret)
exit
Rails.application.credentials.dig(:auth_secret)
Rails.application.credentials.dig(:secret_key_base)
 JsonWebToken.decode(token)
exit
Rails.env.development?
Rails.env.production?
Rails.env.test?
rails.env.test?
Rails.application.credentials
Rails.application.credentials.dig(:secret_key_base)
JsonWebToken.decode(token)
exit
token
JsonWebToken.decode(token)
exit
token
exit
;
login
exit
